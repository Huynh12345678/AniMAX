{"version":3,"sources":["utils/ProgressBar.tsx","components/HomePage/TextIcon.tsx","components/BrowserPage/AnimeCard.tsx","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../../src/useIntersectionObserver.ts","../../src/useTrackVisibility.ts","../../src/useInfiniteScroll.ts","apis/useBrowseList.ts","components/BrowserPage/Select.tsx","pages/Browse.tsx","../node_modules/@babel/runtime/helpers/esm/toArray.js"],"names":["ProgressBar","config","barColors","ProgressBarLoading","TextIcon","props","iconSize","Icon","icon","className","iconClassName","textClassName","text","classNames","size","AnimeCard","pathname","useLocation","isSliding","useSelector","state","sliding","conditions","conditions2","to","slug","onClick","e","event","preventDefault","onError","target","src","handleError","image","alt","title","classNameImg","isUpcoming","upcomingYear","AiFillStar","stars","toString","some","el","time","includes","currentEpisode","style","quality","isCompleted","BiTime","date","AiOutlineCalendar","views","GrView","toLocaleString","description","_iterableToArray","iter","Symbol","iterator","Array","from","_toConsumableArray","arr","isArray","arrayLikeToArray","unsupportedIterableToArray","TypeError","DEFAULT_THRESHOLD","useTrackVisibility","rootMargin","args","threshold","nodeRef","useRef","rootRef","observerRef","useState","entry","setEntry","unobserve","useCallback","currentObserver","useEffect","observe","node","root","observer","IntersectionObserver","newEntry","initializeObserver","useIntersectionObserver","ref","result","isVisible","Boolean","wasEverVisible","setWasEverVisible","loading","hasNextPage","onLoadMore","disabled","delayInMs","DEFAULT_DELAY_IN_MS","shouldLoadMore","timer","setTimeout","clearTimeout","useBrowseList","useInfiniteQuery","pageParam","getList","page","getNextPageParam","pagination","Number","currentPage","totalPage","Select","children","selectProps","ALL","TYPES","GENRES","SEASONS","Browse","dispatch","useDispatch","selectSort","sort","total","setTotal","SORTS","index","selectedSorting","setSelectedSorting","x","useParams","xslug","setXslug","replace","split","arrayWithHoles","nonIterableRest","category","join","data","isLoading","fetchNextPage","isFetchingNextPage","totalAnime","pages","useInfiniteScroll","sentryRef","current","find","type","list","map","flat","document","name","winter","spring","summer","autumn","decodeURI","toUpperCase","pgTitle","value","onChange","payload","findIndex","item","Loader","anime","length"],"mappings":"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","file":"static/js/10.dd58a0da.chunk.js","sourcesContent":["import ProgressBar from \"react-topbar-progress-indicator\";\r\n\r\nProgressBar.config({\r\n    barColors: {\r\n        \"0\": \"#ff0000\",\r\n    },\r\n});\r\n\r\nconst ProgressBarLoading = () => {\r\n    return <ProgressBar />;\r\n};\r\n\r\nexport default ProgressBarLoading;","import React from 'react';\r\nimport classNames from \"classnames\";\r\n\r\ninterface TextIconProps {\r\n    className?: string;\r\n    textClassName?: string;\r\n    iconClassName?: string;\r\n    icon: React.ComponentType<{ className?: string; size: number }>;\r\n    text: string;\r\n    iconSize?: number;\r\n}\r\n\r\nconst TextIcon = (props: TextIconProps) => {\r\n    const {\r\n        iconSize = 16,\r\n        icon: Icon,\r\n        className,\r\n        iconClassName,\r\n        textClassName,\r\n        text,\r\n    } = props;\r\n\r\n    return (\r\n        <div className={classNames(\"flex items-center\", className)}>\r\n            <Icon size={iconSize} className={iconClassName} />\r\n            <p className={classNames(\"line-clamp-1 pl-1 pt-0.5\", textClassName)}>{text}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TextIcon;","import classNames from 'classnames';\r\nimport { AiFillStar, AiOutlineCalendar } from 'react-icons/ai';\r\nimport { BiTime } from 'react-icons/bi';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport { RootState } from '../../reducers';\r\nimport { Anime } from '../../types';\r\nimport TextIcon from '../HomePage/TextIcon';\r\nimport { useSelector } from 'react-redux';\r\nimport { BsPlayCircle } from 'react-icons/bs';\r\nimport { GrView } from 'react-icons/gr';\r\n\r\ninterface AnimeCardProps extends Anime {\r\n    className?: string;\r\n    onClick?: () => void;\r\n    classNameImg?: string;\r\n}\r\nconst AnimeCard = (props: AnimeCardProps) => {\r\n    const { pathname } = useLocation();\r\n\r\n    const isSliding: boolean = useSelector((state: RootState) => state.sliding);\r\n    const handleOnClick = (event: any) => {\r\n        if (isSliding) {\r\n            event.preventDefault();\r\n            return;\r\n        }\r\n    }\r\n    const conditions = [\"giờ\", \"phút\", \"Giờ\", \"Phút\"];\r\n    const conditions2 = [\"HD\", \"BD\", \"FHD\"];\r\n    const handleError = (e: any) => {\r\n        e.target.src = '/default.png';\r\n    }\r\n\r\n    return (\r\n        <Link to={`/info/${props.slug}`} onClick={e => handleOnClick(e)}>\r\n            <div className={classNames(\"relative shadow-lg group\", props.className)}>\r\n                <img\r\n                    onError={(e) => handleError(e)}\r\n                    src={props.image}\r\n                    alt={props.title}\r\n                    className={classNames(\r\n                        \"w-full h-48 md:h-60 object-cover rounded-md rounded-b-none\",\r\n                        props.classNameImg ? props.classNameImg : 'lg:h-80'\r\n                    )}\r\n                // loading='lazy'\r\n                />\r\n\r\n                {props.isUpcoming && (\r\n                    <div className=\"absolute inset-0 bg-black bg-opacity-60 flex items-center justify-center\">\r\n                        <p className=\"text-white text-3xl font-bold\">\r\n                            {props.upcomingYear}\r\n                        </p>\r\n                        <h1 className='font-bold z-10 absolute bottom-0 p-2 bg-red-500 w-full text-center bg-opacity-80'>SẮP CHIẾU</h1>\r\n                    </div>\r\n                )}\r\n\r\n                <div className=\"absolute inset-0 invisible group-hover:visible bg-black bg-opacity-60 flex items-center justify-center\">\r\n                    <BsPlayCircle size={70} className=\"text-white\" />\r\n                </div>\r\n\r\n                <div className=\"absolute top-2 z-10 left-2 bg-black px-3 py-1 rounded-2xl text-white text-xs bg-opacity-70\">\r\n                    <TextIcon icon={AiFillStar} text={props.stars.toString()} className='text-base text-yellow-200'></TextIcon>\r\n                </div>\r\n                {\r\n                    !props.isUpcoming && <div className={classNames(\"absolute top-2 right-2 text-white text-xs text-center\", conditions.some(el => props.time?.includes(el)) || props.currentEpisode === '' || conditions2.some(el => props.currentEpisode?.includes(el)) ? ' bg-three rounded-md w-auto px-2' : 'bg-red-500 rounded-full w-12 px-1 pt-3 py-1 h-12')} style={{ \"lineHeight\": '0.5em' }}>\r\n                        {\r\n                            conditions.some(el => props.time?.includes(el)) || props.currentEpisode === '' || conditions2.some(el => props.currentEpisode?.includes(el)) ?\r\n                                <span className='text-base text-black font-thin'>{props.quality || props.currentEpisode}</span>\r\n                                :\r\n                                (props.isCompleted) ?\r\n                                    <>HOÀN <span className='font-bold text-lg'>TẤT</span></>\r\n                                    :\r\n                                    <>TẬP <span className='font-bold text-lg'>{props.currentEpisode}</span></>\r\n                        }\r\n                    </div>\r\n                }\r\n            </div>\r\n            <div\r\n                className={classNames(\r\n                    \"bg-background-darker p-3 w-full space-y-2 rounded-b-md\",\r\n                    pathname.includes('info') ? 'max-h-20 min-h-5' : 'max-h-20 min-h-11'\r\n                )}\r\n            >\r\n                <p className={classNames(\"uppercase text-white font-bold text-sm hover:text-three\", pathname.includes('info') ? 'line-clamp-2' : 'line-clamp-1')} title={props.title}>\r\n                    {props.title}\r\n                </p>\r\n\r\n                <div className=\"space-y-1\">\r\n                    <div className=\"flex items-center\">\r\n                        {/* <TextIcon\r\n                            icon={AiFillStar}\r\n                            iconClassName=\"text-yellow-400 mr-1\"\r\n                            text={props.stars.toString()}\r\n                            textClassName=\"text-yellow-400 text-xs\"\r\n                            iconSize={12}\r\n                        /> */}\r\n\r\n                        {props.time && (\r\n                            <TextIcon\r\n                                // className=\"ml-2\"\r\n                                icon={BiTime}\r\n                                iconClassName=\"text-gray-400 mr-1\"\r\n                                text={props.time.includes('Chưa') ? '...' : props.time}\r\n                                textClassName=\"text-white text-xs\"\r\n                                iconSize={12}\r\n                            />\r\n                        )}\r\n\r\n                        <p className=\"px-2 ml-2 text-xs font-medium bg-primary text-white rounded-md mt-0.5\">\r\n                            {props.quality?.includes('Chưa') ? '?' : props.quality}\r\n                        </p>\r\n\r\n                        {props.date && (\r\n                            <TextIcon\r\n                                icon={AiOutlineCalendar}\r\n                                iconClassName=\"text-gray-400 mr-1 ml-2\"\r\n                                text={props.date}\r\n                                textClassName=\"text-white text-xs\"\r\n                                iconSize={12}\r\n                            />\r\n                        )}\r\n                    </div>\r\n                    <div className='flex items-center'>\r\n                        {props.views && (\r\n                            <TextIcon\r\n                                // className=\"ml-2\"\r\n                                icon={GrView}\r\n                                iconClassName=\"text-gray-400 mr-1\"\r\n                                text={'Lượt xem: ' + props.views.toLocaleString()}\r\n                                textClassName=\"text-white text-xs\"\r\n                                iconSize={12}\r\n                            />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n\r\n                <p className=\"text-gray-400 text-xs line-clamp-3\">\r\n                    {props.description}\r\n                </p>\r\n            </div>\r\n        </Link>\r\n    );\r\n};\r\n\r\nexport default AnimeCard;","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { useState, useCallback, useEffect, useRef } from 'react';\r\n\r\nconst DEFAULT_ROOT_MARGIN = '0px';\r\nconst DEFAULT_THRESHOLD = [0];\r\n\r\n// eslint-disable-next-line no-undef\r\nexport type IntersectionObserverHookArgs = IntersectionObserverInit;\r\n\r\nexport type IntersectionObserverHookRefCallbackNode = Element | null;\r\n\r\nexport type IntersectionObserverHookRefCallback = (\r\n  node: IntersectionObserverHookRefCallbackNode,\r\n) => void;\r\n\r\nexport type IntersectionObserverHookRootRefCallbackNode = IntersectionObserverHookArgs['root'];\r\n\r\nexport type IntersectionObserverHookRootRefCallback = (\r\n  node: IntersectionObserverHookRootRefCallbackNode,\r\n) => void;\r\n\r\nexport type IntersectionObserverHookResult = [\r\n  IntersectionObserverHookRefCallback,\r\n  {\r\n    entry: IntersectionObserverEntry | undefined;\r\n    rootRef: IntersectionObserverHookRootRefCallback;\r\n  },\r\n];\r\n\r\n// For more info:\r\n// https://developers.google.com/web/updates/2016/04/intersectionobserver\r\n// https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\r\nfunction useIntersectionObserver(\r\n  args?: IntersectionObserverHookArgs,\r\n): IntersectionObserverHookResult {\r\n  const rootMargin = args?.rootMargin ?? DEFAULT_ROOT_MARGIN;\r\n  const threshold = args?.threshold ?? DEFAULT_THRESHOLD;\r\n\r\n  const nodeRef = useRef<IntersectionObserverHookRefCallbackNode>(null);\r\n  const rootRef = useRef<IntersectionObserverHookRootRefCallbackNode>(null);\r\n  const observerRef = useRef<IntersectionObserver | null>(null);\r\n\r\n  const [entry, setEntry] = useState<IntersectionObserverEntry>();\r\n\r\n  const unobserve = useCallback(() => {\r\n    // Disconnect the current observer (if there is one)\r\n    const currentObserver = observerRef.current;\r\n    currentObserver?.disconnect();\r\n    observerRef.current = null;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      // We disconnect the observer on unmount to prevent memory leaks etc.\r\n      unobserve();\r\n    };\r\n  }, [unobserve]);\r\n\r\n  const observe = useCallback(() => {\r\n    const node = nodeRef.current;\r\n    if (node) {\r\n      const root = rootRef.current;\r\n      const options = { root, rootMargin, threshold };\r\n      // Create a observer for current \"node\" with given options.\r\n      const observer = new IntersectionObserver(([newEntry]) => {\r\n        setEntry(newEntry);\r\n      }, options);\r\n      observer.observe(node);\r\n      observerRef.current = observer;\r\n    }\r\n  }, [rootMargin, threshold]);\r\n\r\n  const initializeObserver = useCallback(() => {\r\n    unobserve();\r\n    observe();\r\n  }, [observe, unobserve]);\r\n\r\n  const refCallback = useCallback<IntersectionObserverHookRefCallback>(\r\n    (node) => {\r\n      nodeRef.current = node;\r\n      initializeObserver();\r\n    },\r\n    [initializeObserver],\r\n  );\r\n\r\n  const rootRefCallback = useCallback<IntersectionObserverHookRootRefCallback>(\r\n    (rootNode) => {\r\n      rootRef.current = rootNode;\r\n      initializeObserver();\r\n    },\r\n    [initializeObserver],\r\n  );\r\n\r\n  return [refCallback, { entry, rootRef: rootRefCallback }];\r\n}\r\n\r\nexport default useIntersectionObserver;\r\n","import { useEffect, useState } from 'react';\r\nimport useIntersectionObserver, {\r\n  IntersectionObserverHookArgs,\r\n  IntersectionObserverHookResult,\r\n} from './useIntersectionObserver';\r\n\r\nexport type TrackVisibilityHookArgs = IntersectionObserverHookArgs;\r\n\r\nexport type TrackVisibilityHookResult = [\r\n  IntersectionObserverHookResult[0],\r\n  IntersectionObserverHookResult[1] & {\r\n    isVisible: boolean;\r\n    wasEverVisible: boolean;\r\n  },\r\n];\r\n\r\nfunction useTrackVisibility(\r\n  args?: IntersectionObserverHookArgs,\r\n): TrackVisibilityHookResult {\r\n  const [ref, result] = useIntersectionObserver(args);\r\n  const isVisible = Boolean(result.entry?.isIntersecting);\r\n  const [wasEverVisible, setWasEverVisible] = useState(isVisible);\r\n\r\n  useEffect(() => {\r\n    if (isVisible) {\r\n      setWasEverVisible(isVisible);\r\n    }\r\n  }, [isVisible]);\r\n\r\n  return [ref, { ...result, isVisible, wasEverVisible }];\r\n}\r\n\r\nexport default useTrackVisibility;\r\n","import { useEffect } from 'react';\nimport {\n  useTrackVisibility,\n  IntersectionObserverHookArgs,\n  IntersectionObserverHookRefCallback as UseInfiniteScrollHookRefCallback,\n  IntersectionObserverHookRootRefCallback as UseInfiniteScrollHookRootRefCallback,\n} from 'react-intersection-observer-hook';\n\nconst DEFAULT_DELAY_IN_MS = 100;\n\nexport {\n  UseInfiniteScrollHookRefCallback,\n  UseInfiniteScrollHookRootRefCallback,\n};\n\nexport type UseInfiniteScrollHookResult = [\n  UseInfiniteScrollHookRefCallback,\n  { rootRef: UseInfiniteScrollHookRootRefCallback },\n];\n\nexport type UseInfiniteScrollHookArgs = Pick<\n  IntersectionObserverHookArgs,\n  // We pass this to 'IntersectionObserver'. We can use it to configure when to trigger 'onLoadMore'.\n  'rootMargin'\n> & {\n  // Some sort of \"is fetching\" info of the request.\n  loading: boolean;\n  // If the list has more items to load.\n  hasNextPage: boolean;\n  // The callback function to execute when the 'onLoadMore' is triggered.\n  // eslint-disable-next-line no-undef\n  onLoadMore: VoidFunction;\n  // Flag to stop infinite scrolling. Can be used in case of an error etc too.\n  disabled?: boolean;\n  // How long it should wait before triggering 'onLoadMore'.\n  delayInMs?: number;\n};\n\nfunction useInfiniteScroll({\n  loading,\n  hasNextPage,\n  onLoadMore,\n  rootMargin,\n  disabled,\n  delayInMs = DEFAULT_DELAY_IN_MS,\n}: UseInfiniteScrollHookArgs): UseInfiniteScrollHookResult {\n  const [ref, { rootRef, isVisible }] = useTrackVisibility({\n    rootMargin,\n  });\n\n  const shouldLoadMore = !disabled && !loading && isVisible && hasNextPage;\n\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    if (shouldLoadMore) {\n      // When we trigger 'onLoadMore' and new items are added to the list,\n      // right before they become rendered on the screen, 'loading' becomes false\n      // and 'isVisible' can be true for a brief time, based on the scroll position.\n      // So, it triggers 'onLoadMore' just after the first one is finished.\n      // We use a small delay here to prevent this kind of situations.\n      // It can be configured by hook args.\n      const timer = setTimeout(() => {\n        onLoadMore();\n      }, delayInMs);\n      return () => {\n        clearTimeout(timer);\n      };\n    }\n  }, [onLoadMore, shouldLoadMore, delayInMs]);\n\n  return [ref, { rootRef }];\n}\n\nexport default useInfiniteScroll;\n","import React from 'react';\r\nimport { useInfiniteQuery } from 'react-query';\r\nimport { getList } from './anime';\r\n\r\ninterface Props {\r\n    category: string;\r\n    slug: string;\r\n    sort: string;\r\n}\r\nconst useBrowseList = (props: Props) => {\r\n    const fetchList = ({ pageParam = 1 }) => getList({ ...props, page: pageParam });\r\n\r\n    return useInfiniteQuery([\"browse\", props], fetchList, {\r\n        getNextPageParam: ({ pagination }) =>\r\n            Number(pagination.currentPage) >= Number(pagination.totalPage)\r\n                ? null\r\n                : Number(pagination.currentPage) + 1,\r\n    });\r\n};\r\n\r\nexport default useBrowseList;","import classNames from 'classnames';\r\nimport React, { PropsWithChildren } from 'react';\r\nimport { BiChevronDown } from 'react-icons/bi';\r\n\r\ninterface selectProps extends React.HTMLProps<HTMLSelectElement> {\r\n    className?: string;\r\n}\r\nconst Select = (props: PropsWithChildren<selectProps>) => {\r\n    const { className, children, ...selectProps } = props;\r\n\r\n    return (\r\n        <div className=\"relative inline-flex self-center\">\r\n            <select\r\n                className={classNames(\r\n                    \"text-lg font-medium rounded border border-gray-500 text-white pl-5 pr-9 focus:outline-none appearance-none\",\r\n                    className\r\n                )}\r\n                {...selectProps}\r\n            >\r\n                {children}\r\n            </select>\r\n            <BiChevronDown\r\n                size={20}\r\n                className=\"absolute right-2 z-10 pointer-events-none text-white transition transform -translate-y-1/2 top-1/2\"\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Select;","import React, { useEffect, useMemo, useState } from 'react';\r\nimport { ImSpinner3 } from 'react-icons/im';\r\nimport useInfiniteScroll from \"react-infinite-scroll-hook\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation, useParams } from 'react-router-dom';\r\nimport useBrowseList from '../apis/useBrowseList';\r\nimport AnimeCard from '../components/BrowserPage/AnimeCard';\r\nimport Select from '../components/BrowserPage/Select';\r\nimport Loader from '../components/Loader/Loader';\r\nimport { GENRES, SEASONS, TYPES, SORTS } from '../constants';\r\nimport ProgressBarLoading from '../utils/ProgressBar';\r\nimport { RootState } from '../reducers';\r\nimport classNames from 'classnames';\r\n\r\nconst ALL = [...TYPES, ...GENRES, ...SEASONS];\r\n\r\nconst Browse = () => {\r\n    const dispatch = useDispatch();\r\n    const selectSort = useSelector((state: RootState) => state.sort);\r\n\r\n    const [total, setTotal] = useState('');\r\n    const [selectedSorting, setSelectedSorting] = useState(SORTS[selectSort.index].slug);\r\n    const { pathname } = useLocation();\r\n    var x = (useParams());\r\n    const [xslug, setXslug] = useState({});\r\n\r\n    const [category, ...slug] = pathname.replace(\"/\", \"\").split(\"/\");\r\n\r\n    const { data, isLoading, fetchNextPage, hasNextPage, isFetchingNextPage } = useBrowseList({ category, sort: selectedSorting, slug: slug.join(\"/\") });\r\n\r\n    const totalAnime = `${data?.pages[0].total ? '(' + data?.pages[0].total[0] + ')' : ''}`;\r\n\r\n    const [sentryRef] = useInfiniteScroll({\r\n        loading: isFetchingNextPage,\r\n        hasNextPage: !!hasNextPage,\r\n        onLoadMore: fetchNextPage,\r\n        rootMargin: \"0px 0px 100px 0px\",\r\n    });\r\n\r\n    const handleSortingSelectChange = (\r\n        e: React.ChangeEvent<HTMLSelectElement>\r\n    ) => {\r\n        setSelectedSorting(e.target.value);\r\n        dispatch({ type: 'SORT', payload: { index: SORTS.findIndex(item => item.slug === e.target.value) } });\r\n    };\r\n\r\n    const current = ALL.find((type) => pathname.includes(type.slug)); //lọc ra cái nào có slug nằm trong pathname\r\n\r\n    const list = data?.pages.map((list) => list.data).flat(); //gộp các mảng page thành 1 mảng data\r\n\r\n    useEffect(() => {\r\n        document.title = \"Browser - AniMAX\"\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (total === '') {\r\n            setXslug(x);\r\n            setTotal(totalAnime);\r\n        } else {\r\n            if (x !== xslug) {\r\n                setXslug(x);\r\n                setTotal(totalAnime);\r\n            }\r\n        }\r\n    }, [totalAnime, x])\r\n\r\n    const pgTitle = () => {\r\n        if (!current?.name) {\r\n            if (pathname.includes('seasons')) {\r\n                const convert: any = {\r\n                    winter: 'Mùa Đông',\r\n                    spring: 'Mùa Xuân',\r\n                    summer: 'Mùa Hạ',\r\n                    autumn: 'Mùa Thu'\r\n                }\r\n                return convert[slug[0]] + ' ' + slug[1] + ` ${total}`\r\n            }\r\n            return `KẾT QUẢ TÌM KIẾM: \\xa0'${decodeURI(slug[0].toUpperCase())}'`;\r\n        } else {\r\n            return current?.name + ` ${total}`\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"w-full\">\r\n                <div className=\"w-full p-2\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                        {\r\n                            <p className=\"text-white font-bold text-3xl\">{pgTitle()}</p>\r\n                        }\r\n                        <Select value={selectedSorting} onChange={handleSortingSelectChange} className='bg-black'>\r\n                            {\r\n                                SORTS.map(sort => (\r\n                                    <option value={sort.slug} key={sort.slug}>\r\n                                        {sort.name}\r\n                                    </option>\r\n                                ))\r\n                            }\r\n                        </Select>\r\n                    </div>\r\n\r\n                    {isLoading && (\r\n                        <div className=\"w-full flex justify-center items-center\">\r\n                            <ProgressBarLoading />\r\n                            <Loader />\r\n                        </div>\r\n                    )}\r\n\r\n                    <div className=\"my-6 flex flex-wrap\">\r\n                        {\r\n                            !isLoading && list?.map(anime => (\r\n                                <div\r\n                                    className=\"mt-2 -mr-0 pr-2 w-1/2 sm:w-1/3 md:w-1/4 lg:w-1/5 xl:w-1/6 2xl:w-1/7\"\r\n                                    key={anime.slug}\r\n                                >\r\n                                    <AnimeCard {...anime} />\r\n                                </div>\r\n                            ))\r\n                        }\r\n                    </div>\r\n\r\n                    {(hasNextPage) && (\r\n                        <div ref={sentryRef} className='flex justify-center pt-5'>\r\n                            <ImSpinner3 size={20} className=\"text-white animate-spin mr-2\" />\r\n                        </div>\r\n                    )}\r\n                    {\r\n                        (!hasNextPage && !isLoading) && (<h1 className={classNames('text-2xl text-center font-semibold', list?.length == 0 ? 'absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2' : 'pt-6')}>{list?.length == 0 ? 'Kết quả không tìm thấy!' : '-  The End  -'}</h1>)\r\n                    }\r\n                    {\r\n                        isFetchingNextPage && <ProgressBarLoading />\r\n                    }\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Browse;","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}"],"sourceRoot":""}